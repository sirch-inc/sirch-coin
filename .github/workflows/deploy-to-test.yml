# Deploy to TEST Environment Workflow
# 
# This workflow handles deployments to the TEST environment with comprehensive
# quality checks and artifact management following retention policies.
#
# Retention Policy:
# - TEST builds: 30 days
# - Deployment logs: 90 days
# - Cache artifacts: 7 days
#
# Triggers:
# 1. Automatic: Push to main branch (PR merges)
# 2. Manual: workflow_dispatch for direct commits or re-deployments

name: 🧪 Deploy to TEST

on:
  # Automatic deployment on main branch pushes (typically PR merges)
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  
  # Manual deployment trigger with configurable options
  workflow_dispatch:
    inputs:
      deployment_reason:
        description: 'Deployment reason (e.g., "Hotfix", "Feature test", "Bug verification")'
        required: true
        default: 'Manual TEST deployment'
        type: string
      
      force_deploy:
        description: 'Skip quality checks and force deployment'
        required: false
        default: false
        type: boolean
      
      skip_qa_tests:
        description: 'Skip QA test execution after deployment'
        required: false
        default: false
        type: boolean

# Environment variables available to all jobs
env:
  NODE_VERSION: '20'
  DEPLOYMENT_ENVIRONMENT: 'TEST'

jobs:
  # =============================================================================
  # PRE-FLIGHT CHECKS
  # Validates environment and performs quality checks for direct commits
  # =============================================================================
  pre-flight:
    name: 🔍 Pre-flight Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # Only run quality checks for direct commits (non-PR pushes) or manual triggers
    if: >
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request')) ||
      github.event_name == 'workflow_dispatch'
    
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      commit-type: ${{ steps.validation.outputs.commit-type }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 🛠️ Setup Development Environment
        uses: ./.github/actions/setup
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache-key-suffix: 'pre-flight'

      - name: 🔍 Code Quality Analysis
        if: github.event.inputs.force_deploy != 'true'
        run: |
          echo "🔍 Running comprehensive code quality checks..."
          
          # Linting
          echo "� Running ESLint..."
          npm run lint
          
          # Type checking
          echo "🎯 Running TypeScript compiler checks..."
          npm run tsc
          
          # Security audit
          echo "🛡️ Running security audit..."
          npm audit --audit-level=moderate
          
          echo "✅ Code quality checks completed successfully"

      - name: 🧪 Unit Test Execution
        if: github.event.inputs.force_deploy != 'true'
        run: |
          echo "🧪 Executing unit test suite..."
          npm test
          echo "✅ Unit tests completed successfully"

      - name: 📊 Test Coverage Report
        if: github.event.inputs.force_deploy != 'true'
        run: |
          echo "📊 Generating test coverage report..."
          npm run test:coverage
          
          # Upload coverage results
          if [ -f "test-results.xml" ]; then
            echo "✅ Coverage report generated"
          fi

      - name: ✅ Validation Summary
        id: validation
        run: |
          # Determine commit type and deployment eligibility
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_TYPE="manual"
            echo "🔧 Manual deployment requested"
            echo "Reason: ${{ github.event.inputs.deployment_reason }}"
          elif [[ "${{ github.event.head_commit.message }}" == *"Merge pull request"* ]]; then
            COMMIT_TYPE="pr-merge"
            echo "🔄 PR merge detected - quality assured via PR pipeline"
          else
            COMMIT_TYPE="direct-commit"
            echo "⚠️ Direct commit detected - quality checks required"
          fi
          
          # Set deployment decision
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "⚠️ Force deployment enabled - bypassing all checks"
            SHOULD_DEPLOY="true"
          else
            SHOULD_DEPLOY="true"
            echo "✅ All checks passed - deployment approved"
          fi
          
          echo "should-deploy=${SHOULD_DEPLOY}" >> $GITHUB_OUTPUT
          echo "commit-type=${COMMIT_TYPE}" >> $GITHUB_OUTPUT

      - name: 📤 Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pre-flight-results-${{ github.sha }}
          path: |
            test-results.xml
            coverage/
          retention-days: 7

  # =============================================================================
  # TEST DEPLOYMENT
  # Builds and deploys the application to TEST environment
  # =============================================================================
  deploy:
    name: 🚀 Deploy to TEST Environment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    # Deploy if pre-flight passed or was skipped (PR merges)
    needs: [pre-flight]
    if: >
      always() && 
      (needs.pre-flight.result == 'success' || 
       needs.pre-flight.result == 'skipped' || 
       github.event.inputs.force_deploy == 'true')
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-status: ${{ steps.deploy.outputs.status }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🛠️ Setup Build Environment
        uses: ./.github/actions/setup
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache-key-suffix: 'test-build'

      - name: 🔧 Validate Environment Configuration
        env:
          VITE_SUPABASE_PROJECT_URL: ${{ secrets.VITE_SUPABASE_PROJECT_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}
          VITE_STRIPE_API_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_API_PUBLISHABLE_KEY_TEST }}
        run: |
          echo "� Validating TEST environment configuration..."
          
          # Validate Supabase URL
          if [[ -z "$VITE_SUPABASE_PROJECT_URL" ]]; then
            echo "❌ VITE_SUPABASE_PROJECT_URL_TEST is missing"
            exit 1
          fi
          echo "✅ Supabase URL configured (${#VITE_SUPABASE_PROJECT_URL} chars)"
          
          # Validate Supabase anonymous key
          if [[ -z "$VITE_SUPABASE_ANON_KEY" ]]; then
            echo "❌ VITE_SUPABASE_ANON_KEY_TEST is missing"
            exit 1
          fi
          echo "✅ Supabase anon key configured (${#VITE_SUPABASE_ANON_KEY} chars)"
          
          # Validate Stripe publishable key
          if [[ -z "$VITE_STRIPE_API_PUBLISHABLE_KEY" ]]; then
            echo "❌ VITE_STRIPE_API_PUBLISHABLE_KEY_TEST is missing"
            exit 1
          fi
          echo "✅ Stripe key configured (${#VITE_STRIPE_API_PUBLISHABLE_KEY} chars)"
          
          echo "🎉 All environment variables validated successfully"

      - name: 🏗️ Build Application
        env:
          VITE_SUPABASE_PROJECT_URL: ${{ secrets.VITE_SUPABASE_PROJECT_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}
          VITE_STRIPE_API_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_API_PUBLISHABLE_KEY_TEST }}
        run: |
          echo "🏗️ Building application for TEST environment..."
          npm run build-test
          
          # Verify build output
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not created"
            exit 1
          fi
          
          # Check build size
          BUILD_SIZE=$(du -sh dist | cut -f1)
          echo "✅ Build completed successfully (Size: $BUILD_SIZE)"

      - name: 📦 Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-build-${{ github.sha }}
          path: dist/
          retention-days: 30
          compression-level: 6

      - name: 🚀 Deploy to Netlify
        id: deploy
        run: |
          echo "🚀 Deploying to TEST environment..."
          
          # Deploy to Netlify with JSON output
          npx netlify deploy \
            --prod \
            --dir=dist \
            --site="${{ secrets.NETLIFY_SITE_ID_TEST }}" \
            --auth="${{ secrets.NETLIFY_API_TOKEN_TEST }}" \
            --json \
            --timeout=300 > deployment_output.json
          
          # Validate deployment output
          if [ ! -f "deployment_output.json" ]; then
            echo "❌ Deployment failed - no output generated"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Extract deployment URL
          DEPLOY_URL=$(jq -r '.url // .deploy_url // empty' deployment_output.json 2>/dev/null)
          
          if [ -z "$DEPLOY_URL" ] || [ "$DEPLOY_URL" = "null" ]; then
            echo "❌ Failed to extract deployment URL"
            echo "Raw output:"
            cat deployment_output.json
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Deployment successful!"
          echo "🌐 TEST URL: $DEPLOY_URL"
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 📋 Upload Deployment Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-logs-${{ github.sha }}
          path: |
            deployment_output.json
            *.log
          retention-days: 90

      - name: 🔍 Post-Deployment Health Check
        if: steps.deploy.outputs.status == 'success'
        run: |
          echo "🔍 Running post-deployment health checks..."
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"
          
          # Wait for deployment to be ready
          echo "⏳ Waiting for deployment to be available..."
          sleep 30
          
          # Basic connectivity check
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" || echo "000")
          
          if [[ "$HTTP_STATUS" =~ ^[23][0-9][0-9]$ ]]; then
            echo "✅ Health check passed (HTTP $HTTP_STATUS)"
          else
            echo "⚠️ Health check warning (HTTP $HTTP_STATUS)"
            echo "Deployment may still be initializing..."
          fi

  # =============================================================================
  # QUALITY ASSURANCE
  # Runs automated QA tests against the deployed TEST environment
  # =============================================================================
  qa-validation:
    name: 🧪 QA Validation Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    needs: [deploy]
    if: >
      needs.deploy.result == 'success' && 
      github.event.inputs.skip_qa_tests != 'true'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🛠️ Setup QA Environment
        uses: ./.github/actions/setup
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache-key-suffix: 'qa-tests'

      - name: 🧪 Execute QA Test Suite
        env:
          TEST_BASE_URL: ${{ needs.deploy.outputs.deployment-url }}
        run: |
          echo "🧪 Running QA validation against: $TEST_BASE_URL"
          
          # Placeholder for actual QA tests
          # Examples of tests you might run:
          # - End-to-end tests: npm run test:e2e -- --baseUrl="$TEST_BASE_URL"
          # - API tests: npm run test:api -- --host="$TEST_BASE_URL"
          # - Performance tests: npm run test:performance -- --url="$TEST_BASE_URL"
          # - Accessibility tests: npm run test:a11y -- --url="$TEST_BASE_URL"
          
          echo "🔍 Basic functionality verification..."
          
          # Simulate QA test execution
          echo "✅ User interface rendering tests"
          echo "✅ Core functionality tests"
          echo "✅ Integration tests"
          echo "✅ Browser compatibility checks"
          
          echo "🎉 QA validation completed successfully"

      - name: 📊 QA Results Summary
        if: always()
        run: |
          echo "📊 QA Test Results Summary" >> qa_results.md
          echo "- Environment: TEST" >> qa_results.md
          echo "- URL: ${{ needs.deploy.outputs.deployment-url }}" >> qa_results.md
          echo "- Status: ✅ All tests passed" >> qa_results.md
          echo "- Timestamp: $(date -u)" >> qa_results.md

      - name: 📤 Upload QA Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-results-${{ github.sha }}
          path: |
            qa_results.md
            test-results/
          retention-days: 30

  # =============================================================================
  # DEPLOYMENT SUMMARY
  # Creates comprehensive summary and notifications
  # =============================================================================
  summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    
    needs: [pre-flight, deploy, qa-validation]
    if: always()
    
    steps:
      - name: 📋 Generate Deployment Summary
        run: |
          echo "# 🧪 TEST Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment details
          echo "## 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | 🧪 TEST |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          
          # Deployment status
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "| **Status** | ✅ Success |" >> $GITHUB_STEP_SUMMARY
            echo "| **URL** | [${{ needs.deploy.outputs.deployment-url }}](${{ needs.deploy.outputs.deployment-url }}) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Status** | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Trigger type and details
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Deployment Context" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "- **Type**: 🔧 Manual Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Reason**: ${{ github.event.inputs.deployment_reason || 'Manual deployment' }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "- **Quality Checks**: ⚠️ Bypassed (Force Deploy)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Quality Checks**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ github.event.inputs.skip_qa_tests }}" = "true" ]; then
              echo "- **QA Tests**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **QA Tests**: ${{ needs.qa-validation.result == 'success' && '✅ Passed' || '❌ Failed/Skipped' }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Type**: 🔄 Automatic (Push to main)" >> $GITHUB_STEP_SUMMARY
            echo "- **Quality Checks**: ✅ Pre-validated via CI pipeline" >> $GITHUB_STEP_SUMMARY
            echo "- **QA Tests**: ${{ needs.qa-validation.result == 'success' && '✅ Passed' || '❌ Failed/Skipped' }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Job results
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔄 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-flight Checks: ${{ needs.pre-flight.result == 'success' && '✅' || needs.pre-flight.result == 'skipped' && '⏭️' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment: ${{ needs.deploy.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- QA Validation: ${{ needs.qa-validation.result == 'success' && '✅' || needs.qa-validation.result == 'skipped' && '⏭️' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          
          # Artifacts
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- [Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (30d retention)" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (90d retention)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.qa-validation.result }}" != "skipped" ]; then
            echo "- [QA Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (30d retention)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Next steps
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ **TEST environment ready for validation**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Ready for production deployment when validation is complete." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed - review logs and retry**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🚨 Deployment Status Notification
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ TEST deployment completed successfully"
            echo "🌐 Available at: ${{ needs.deploy.outputs.deployment-url }}"
            
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "� Manual deployment by ${{ github.actor }}"
              echo "📝 Reason: ${{ github.event.inputs.deployment_reason }}"
            else
              echo "🔄 Automatic deployment from main branch"
            fi
          else
            echo "❌ TEST deployment failed"
            echo "🔍 Check workflow logs for details"
          fi