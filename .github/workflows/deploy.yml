# GitHub Actions workflow for building and deploying
# Handles Vite builds, bundle analysis, Lighthouse CI, and Netlify deployments
#
# Artifact Retention: Build outputs (7d), Preview logs (14d)
# See: CICD_ARTIFACT_RETENTION_POLICY.md for complete retention strategy

name: Build & Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

  # Run after security and tests complete successfully
  workflow_run:
    workflows: ["Security Scan", "Test & Lint"]
    types: [completed]
    branches: [main]

# Add concurrency control to cancel previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  contents: read
  pull-requests: write
  checks: write
  deployments: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Allow skipping CI with commit message, and ensure dependencies passed
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') && (github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run') }}
    
    environment: 
      name: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      url: ${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}
    
    outputs:
      preview-url: ${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}
      build-status: ${{ steps.build-summary.outputs.status }}
    
    steps:
      ############################################################
      # Startup steps
      ############################################################

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_GITHUB_ACTIONS }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup
        with:
          cache-key-suffix: build
          additional-cache-paths: |
            dist
            node_modules/.vite
            .vite
            tsconfig.tsbuildinfo

      ############################################################
      # Build steps
      ############################################################

      - name: Build for TEST environment
        env:
          VITE_SUPABASE_PROJECT_URL: ${{ secrets.VITE_SUPABASE_PROJECT_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}
          VITE_STRIPE_API_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_API_PUBLISHABLE_KEY_TEST }}
        run: npm run build-test

      - name: Analyze Vite build output
        id: build-analysis
        run: |
          echo "🏗️ Vite Build Analysis" 
          echo "===================="
          
          # Check build structure
          echo "📁 Build Directory Structure:"
          ls -la dist/ || echo "No dist directory found"
          
          # Validate Vite manifest
          if [ -f "dist/.vite/manifest.json" ]; then
            echo "✅ Vite manifest found at dist/.vite/manifest.json"
            ENTRY_COUNT=$(cat dist/.vite/manifest.json | grep -o '"entry"' | wc -l | tr -d ' ')
            echo "📊 Entry points detected: $ENTRY_COUNT"
          elif [ -f "dist/manifest.json" ]; then
            echo "✅ Build manifest found at dist/manifest.json"
            ASSET_COUNT=$(cat dist/manifest.json | grep -o '"file"' | wc -l | tr -d ' ')
            echo "📊 Assets in manifest: $ASSET_COUNT"
          else
            echo "⚠️ No build manifest found"
          fi
          
          # Check for modern/legacy builds
          MODERN_COUNT=$(find dist -name "*.js" | grep -v legacy | wc -l | tr -d ' ')
          LEGACY_COUNT=$(find dist -name "*legacy*.js" | wc -l | tr -d ' ')
          
          echo "🚀 Modern ES modules: $MODERN_COUNT files"
          if [ "$LEGACY_COUNT" -gt 0 ]; then
            echo "🔄 Legacy bundles: $LEGACY_COUNT files"
          else
            echo "✨ Modern-only build (no legacy fallbacks)"
          fi
          
          # Asset optimization check  
          TOTAL_IMAGES=$(find dist -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.webp" | wc -l | tr -d ' ')
          WEBP_COUNT=$(find dist -name "*.webp" | wc -l | tr -d ' ')
          
          if [ "$TOTAL_IMAGES" -gt 0 ]; then
            echo "🖼️ Images: $TOTAL_IMAGES total, $WEBP_COUNT WebP optimized"
          else
            echo "📷 No images found in build"
          fi
          
          # Check Vite-specific optimizations
          echo ""
          echo "⚡ Vite Optimizations:"
          if [ -d "dist/assets" ]; then
            echo "✅ Assets properly hashed for caching"
          fi
          
          if find dist -name "*.js" | grep -q "vendor"; then
            echo "✅ Vendor code splitting detected"
          fi
          
          if find dist -name "*.css" | head -1 | grep -q "\."; then
            echo "✅ CSS extracted and optimized"
          fi
          
          echo "🎯 Build optimized with Vite's modern tooling"
          
          # Output metrics for later use
          BUNDLE_SIZE=$(find dist -name "*.js" -exec cat {} + | wc -c | awk '{printf "%.1f", $1/1024}')
          echo "bundle-size-kb=$BUNDLE_SIZE" >> "$GITHUB_OUTPUT"

      - name: Generate bundle size report
        if: github.event_name == 'pull_request'
        run: |
          echo "## 📊 Bundle Size Report" > bundle-size-report.md
          echo "" >> bundle-size-report.md
          
          # Get detailed file sizes
          echo "### 📦 Asset Sizes" >> bundle-size-report.md
          echo "" >> bundle-size-report.md
          echo "| File | Size | Gzipped* |" >> bundle-size-report.md
          echo "|------|------|----------|" >> bundle-size-report.md
          
          find dist -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) | sort | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              gzipped=$(gzip -c "$file" | wc -c | awk '{printf "%.1fKB", $1/1024}')
              echo "| \`$filename\` | $size | ~$gzipped |" >> bundle-size-report.md
            fi
          done
          
          echo "" >> bundle-size-report.md
          echo "*Estimated gzipped sizes" >> bundle-size-report.md
          
          # Bundle summary
          TOTAL_JS=$(find dist -name "*.js" -exec cat {} + | wc -c | awk '{printf "%.1fKB", $1/1024}')
          TOTAL_CSS=$(find dist -name "*.css" -exec cat {} + | wc -c | awk '{printf "%.1fKB", $1/1024}')
          
          echo "" >> bundle-size-report.md
          echo "### 📈 Bundle Summary" >> bundle-size-report.md
          echo "- **Total JavaScript**: ~$TOTAL_JS" >> bundle-size-report.md
          echo "- **Total CSS**: ~$TOTAL_CSS" >> bundle-size-report.md
          
          # Performance recommendations
          echo "" >> bundle-size-report.md
          echo "### 💡 Performance Notes" >> bundle-size-report.md
          
          LARGE_FILES=$(find dist -name "*.js" -size +100k | wc -l | tr -d ' ')
          if [ "$LARGE_FILES" -gt 0 ]; then
            echo "- ⚠️ $LARGE_FILES JavaScript files are larger than 100KB" >> bundle-size-report.md
            echo "- Consider code splitting for better loading performance" >> bundle-size-report.md
          else
            echo "- ✅ All JavaScript files are under 100KB - good for performance" >> bundle-size-report.md
          fi
          
          echo "- 🚀 Files are automatically compressed by Vite and CDN" >> bundle-size-report.md
          echo "- 📱 Modern browsers will only load the code they need" >> bundle-size-report.md

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        if: github.event_name == 'pull_request'
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Generate Lighthouse report summary
        if: github.event_name == 'pull_request'
        run: |
          echo "## 🚦 Lighthouse Performance Report" > lighthouse-report.md
          echo "" >> lighthouse-report.md
          
          # Check if lighthouse results exist
          if [ -f ".lighthouseci/lhr-*.json" ]; then
            LATEST_REPORT=$(ls -t .lighthouseci/lhr-*.json | head -1)
            
            # Extract scores using jq
            PERFORMANCE=$(cat "$LATEST_REPORT" | jq -r '.categories.performance.score * 100 | floor' 2>/dev/null || echo "N/A")
            ACCESSIBILITY=$(cat "$LATEST_REPORT" | jq -r '.categories.accessibility.score * 100 | floor' 2>/dev/null || echo "N/A")
            BEST_PRACTICES=$(cat "$LATEST_REPORT" | jq -r '.categories["best-practices"].score * 100 | floor' 2>/dev/null || echo "N/A")
            SEO=$(cat "$LATEST_REPORT" | jq -r '.categories.seo.score * 100 | floor' 2>/dev/null || echo "N/A")
            
            # Extract Core Web Vitals
            FCP=$(cat "$LATEST_REPORT" | jq -r '.audits["first-contentful-paint"].displayValue // "N/A"' 2>/dev/null || echo "N/A")
            LCP=$(cat "$LATEST_REPORT" | jq -r '.audits["largest-contentful-paint"].displayValue // "N/A"' 2>/dev/null || echo "N/A")
            CLS=$(cat "$LATEST_REPORT" | jq -r '.audits["cumulative-layout-shift"].displayValue // "N/A"' 2>/dev/null || echo "N/A")
            
            echo "### 📊 Lighthouse Scores" >> lighthouse-report.md
            echo "- **Performance**: ${PERFORMANCE}%" >> lighthouse-report.md
            echo "- **Accessibility**: ${ACCESSIBILITY}%" >> lighthouse-report.md
            echo "- **Best Practices**: ${BEST_PRACTICES}%" >> lighthouse-report.md
            echo "- **SEO**: ${SEO}%" >> lighthouse-report.md
            echo "" >> lighthouse-report.md
            echo "### ⚡ Core Web Vitals" >> lighthouse-report.md
            echo "- **First Contentful Paint**: $FCP" >> lighthouse-report.md
            echo "- **Largest Contentful Paint**: $LCP" >> lighthouse-report.md
            echo "- **Cumulative Layout Shift**: $CLS" >> lighthouse-report.md
          else
            echo "⚠️ Lighthouse analysis not available for this build" >> lighthouse-report.md
          fi
          
          echo "" >> lighthouse-report.md
          echo "📈 *Performance monitoring helps ensure optimal user experience*" >> lighthouse-report.md

      ############################################################
      # Deployment steps
      ############################################################

      - name: Create preview deployment
        id: create_preview
        if: github.event_name == 'pull_request'
        run: |
          COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
          SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)
          PREVIEW_ALIAS="preview-${SHORT_SHA}"
          
          echo "🚀 Deploying preview with alias: $PREVIEW_ALIAS"
          
          # Deploy to Netlify with branch-specific alias
          npx netlify deploy \
            --no-build \
            --dir=dist \
            --alias="$PREVIEW_ALIAS" \
            --site ${{ secrets.NETLIFY_SITE_ID_TEST }} \
            --auth ${{ secrets.NETLIFY_API_TOKEN_TEST }} \
            --json > deploy_output_branch.json
          
          # Check if deployment was successful
          if [ ! -f "deploy_output_branch.json" ]; then
            echo "❌ Preview deployment failed - no output file generated"
            exit 1
          fi
          
          # Extract and output the preview URL
          NETLIFY_PREVIEW_URL=$(jq -r '.deploy_url' deploy_output_branch.json 2>/dev/null || echo "")
          if [ -z "$NETLIFY_PREVIEW_URL" ] || [ "$NETLIFY_PREVIEW_URL" = "null" ]; then
            echo "❌ Failed to parse preview URL from deployment output"
            cat deploy_output_branch.json
            exit 1
          fi
          
          echo "NETLIFY_PREVIEW_URL=$NETLIFY_PREVIEW_URL" >> "$GITHUB_OUTPUT"
          echo "✅ Preview deployed to: $NETLIFY_PREVIEW_URL"

      - name: Create preview deployment status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && steps.create_preview.outputs.NETLIFY_PREVIEW_URL
        env:
          NETLIFY_PREVIEW_URL: ${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}
        with:
          script: |
            const previewUrl = process.env.NETLIFY_PREVIEW_URL;
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Preview Deployment',
              head_sha: '${{ github.event.pull_request.head.sha }}',
              status: 'completed',
              conclusion: 'success',
              details_url: previewUrl,
              output: {
                title: '🚀 Preview Deployment Ready',
                summary: 'Preview is deployed and ready for testing',
                text: `**Preview URL**: [${previewUrl}](${previewUrl})\n\n**Environment**: Netlify Preview\n**Branch**: ${{ env.SOURCE_BRANCH }}\n\nClick the details link above to visit your preview deployment.`
              }
            });

      - name: Build summary
        id: build-summary
        run: |
          BUILD_SIZE="${{ steps.build-analysis.outputs.bundle-size-kb }}"
          PREVIEW_URL="${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}"
          
          if [ -d "dist" ] && [ -n "$(ls -A dist 2>/dev/null)" ]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
            echo "✅ Build completed successfully"
            echo "📦 Bundle size: ${BUILD_SIZE}KB"
            if [ -n "$PREVIEW_URL" ]; then
              echo "🚀 Preview URL: $PREVIEW_URL"
            fi
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
            echo "❌ Build failed - no output generated"
          fi

      - name: Update build job summary
        if: always()
        run: |
          echo "# 🏗️ Build & Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          BUILD_STATUS="${{ steps.build-summary.outputs.status == 'success' && '✅ Success' || '❌ Failed' }}"
          LIGHTHOUSE_STATUS="${{ hashFiles('.lighthouseci/lhr-*.json') != '' && '✅ Completed' || '⚠️ Skipped' }}"
          DEPLOY_STATUS="${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL && '✅ Deployed' || (github.event_name == 'pull_request' && '❌ Failed' || '⏭️ Skipped') }}"
          
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Vite Build | $BUILD_STATUS | Bundle: ${{ steps.build-analysis.outputs.bundle-size-kb || 'Unknown' }}KB |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚦 Lighthouse | $LIGHTHOUSE_STATUS | Performance analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Preview | $DEPLOY_STATUS | ${{ github.event_name == 'pull_request' && 'Netlify deployment' || 'Production push' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}" ]; then
            echo "🔗 **Preview URL**: [${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}](${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.build-summary.outputs.status }}" == "success" ]]; then
            echo "🎉 **Build and deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Build or deployment issues detected.** Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi

      ############################################################
      # Artifact upload
      ############################################################

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-outputs-${{ github.sha }}
          path: |
            dist/
            bundle-size-report.md
            lighthouse-report.md
            performance-metrics.json
          retention-days: 7
          if-no-files-found: warn

      - name: Upload deployment logs
        uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request'
        with:
          name: deployment-logs-${{ github.sha }}
          path: deploy_output_branch.json
          retention-days: 14
          if-no-files-found: ignore