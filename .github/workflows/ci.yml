# A GitHub Actions workflow for CI (run tests, create preview deploys, etc.)
# This workflow runs on PRs to main and direct pushes to main (for emergency fixes).
#
# Artifact Retention: CI builds (7d), Test results (14d), Preview logs (14d)
# See: CICD_ARTIFACT_RETENTION_POLICY.md for complete retention strategy

# Although Netlify supports continuous deployment from GitHub, we use GitHub Actions here instead in 
# order to run tests before deploying, and to have more control over the build and deploy process.
# See also: https://docs.netlify.com/cli/get-started/#continuous-deployment-with-github-actions.
#
# Additionally, at this time, Netlify (free tier) does not support deploying from private org-based repositories
# like ours, so we are using GitHub Actions for CI which skips this. We can revisit this if we move to a paid
# Netlify plan later, but some research suggests that Netlify builds can be expensive even under paid plans.
#
# We are using the Netlify CLI to deploy here, bypassing Netlify's built-in GitHub integration.

name: CI

on:
  # Run on pushes to main (for direct commits/emergency fixes)
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  
  # Run on all PRs to main (your primary workflow)
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

# Add concurrency control to cancel previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  pull-requests: write
  checks: write
  security-events: write  # For SARIF upload
  actions: read  # For dependency review


jobs:
  # Parallel quality checks for faster execution
  quality-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') }}
    strategy:
      fail-fast: false
      matrix:
        check: [lint, typescript, security, unit-tests]
    outputs:
      lint-result: ${{ steps.test.outputs.result }}
      typescript-result: ${{ steps.test.outputs.result }}
      security-result: ${{ steps.test.outputs.result }}
      unit-tests-result: ${{ steps.test.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_GITHUB_ACTIONS }}
          fetch-depth: 0
          fetch-tags: true

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Enhanced Vite caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            dist
            .vite
            coverage
            node_modules/.cache
          key: ${{ runner.os }}-vite-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-vite-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-vite-

      - name: Install dependencies
        run: npm ci

      - name: Run quality check
        id: test
        run: |
          case "${{ matrix.check }}" in
            lint) 
              npm run lint
              echo "result=lint-$?" >> "$GITHUB_OUTPUT"
              ;;
            typescript) 
              npm run tsc
              echo "result=typescript-$?" >> "$GITHUB_OUTPUT"
              ;;
            security) 
              npm audit --audit-level=moderate
              echo "result=security-$?" >> "$GITHUB_OUTPUT"
              ;;
            unit-tests) 
              npm run test:coverage
              echo "result=unit-tests-$?" >> "$GITHUB_OUTPUT"
              ;;
          esac
        continue-on-error: true

      - name: Create status check
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const checkType = '${{ matrix.check }}';
            const outcome = '${{ steps.test.outcome }}';
            
            const checkConfigs = {
              lint: {
                name: 'Lint Checks',
                title: 'ESLint & Prettier',
                successText: 'All code style and linting rules passed',
                failureText: 'Run `npm run lint` locally to see detailed errors'
              },
              typescript: {
                name: 'TypeScript Compilation',
                title: 'TypeScript Compiler',
                successText: 'All TypeScript types are valid',
                failureText: 'Run `npm run tsc` locally to see type errors'
              },
              security: {
                name: 'Security Audit',
                title: 'NPM Security Audit',
                successText: 'All dependencies are secure',
                failureText: 'Run `npm audit` locally to see security issues'
              },
              'unit-tests': {
                name: 'Unit Tests',
                title: 'Vitest Unit Tests',
                successText: 'All tests passed',
                failureText: 'Tests failed. Run `npm test` locally to see details'
              }
            };
            
            const config = checkConfigs[checkType];
            const conclusion = outcome === 'success' ? 'success' : 'failure';
            let summary = conclusion === 'success' ? 
              config.successText.replace('All ', '').replace(' passed', ' successful') :
              config.failureText.split('.')[0];
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: config.name,
              head_sha: '${{ github.event.pull_request.head.sha || github.sha }}',
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: config.title,
                summary: summary,
                text: conclusion === 'success' ? config.successText : config.failureText
              }
            });

  # Comprehensive security scanning job
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and deploy job - depends on quality checks
  build-and-deploy:
    needs: [quality-checks, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ always() && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_GITHUB_ACTIONS }}
          fetch-depth: 0
          fetch-tags: true

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Enhanced Vite build caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            dist
            .vite
            node_modules/.cache
          key: ${{ runner.os }}-vite-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-vite-build-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-vite-build-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          # Optimize Vite build for production
          VITE_BUILD_SOURCEMAP: false

      - name: Generate bundle analysis
        run: npm run build:analyze
        continue-on-error: true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: dist/stats.html
          retention-days: 7

      - name: Check bundle size
        run: npm run size-check
        continue-on-error: true

      - name: Build Storybook (if exists)
        run: |
          if [ -f ".storybook/main.js" ] || [ -f ".storybook/main.ts" ]; then
            npm run build-storybook
          else
            echo "Storybook not configured, skipping..."
          fi
        continue-on-error: true

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - ${{ github.event.head_commit.message }}"
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10

      - name: Wait for deployment
        run: sleep 30
        if: success()

      - name: Run Lighthouse CI
        run: |
          # Get the deploy URL from the Netlify step
          DEPLOY_URL=$(echo "${{ steps.deploy.outputs.deploy-url }}" | head -n1)
          if [ -z "$DEPLOY_URL" ]; then
            echo "Deploy URL not found, using site URL"
            DEPLOY_URL="https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app"
          fi
          
          echo "Running Lighthouse on: $DEPLOY_URL"
          npm run lighthouse -- --url="$DEPLOY_URL"
        continue-on-error: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

      # Notification and summary steps
      - name: Notify on failure
        uses: actions/github-script@v7
        if: failure() && github.event_name == 'pull_request'
        with:
          script: |
            const comment = `
            ## ❌ Build Failed
            
            The CI/CD pipeline encountered an error during the build and deploy phase.
            
            **What to do:**
            1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details
            2. Run \`npm run build\` locally to reproduce the issue
            3. Fix any build errors and push changes
            
            **Common issues:**
            - TypeScript compilation errors
            - Missing environment variables
            - Build process timeouts
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Performance monitoring job (optional, runs after successful deployment)
  performance-monitoring:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run extended Lighthouse audit
        run: |
          # Run comprehensive Lighthouse audit on production
          npm run lighthouse -- --url="https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app" --preset=desktop
        continue-on-error: true

      - name: Performance regression check
        run: |
          # Check for performance regressions (placeholder for future implementation)
          echo "Performance monitoring completed"
        continue-on-error: true