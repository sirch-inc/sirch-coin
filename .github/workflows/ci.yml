# Comprehensive CI workflow with proper job dependencies
# Shows security -> tests -> build/deploy pipeline in GitHub Actions UI
#
# Artifact Retention: CI builds (7d), Test results (14d), Preview logs (14d)
# See: CICD_ARTIFACT_RETENTION_POLICY.md for complete retention strategy

name: CI Pipeline

on:
  workflow_dispatch:
    
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write
  actions: read
  deployments: write

jobs:
  # Security scanning job - runs first
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') }}
    
    outputs:
      security-status: ${{ steps.security-summary.outputs.status }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_GITHUB_ACTIONS }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup
        with:
          cache-key-suffix: security

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD, Unlicense
          comment-summary-in-pr: always
          fail-on-scopes: runtime, development

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: 'vuln,secret,config'
          timeout: '10m'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v4
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run NPM security audit
        id: security
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          echo "Audit completed"
        continue-on-error: true

      - name: Security summary
        id: security-summary
        run: |
          echo "status=success" >> "$GITHUB_OUTPUT"
          echo "✅ Security checks completed"

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results-${{ github.sha }}
          path: |
            trivy-results.sarif
            audit-results.json
          retention-days: 14
          if-no-files-found: warn

  # Testing and linting job - runs in parallel with security
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') }}
    
    outputs:
      test-status: ${{ steps.test-summary.outputs.status }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_GITHUB_ACTIONS }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup
        with:
          cache-key-suffix: test

      - name: Run lint checks
        id: lint
        run: npm run lint -- --cache --cache-location .eslintcache
        continue-on-error: true

      - name: Check TypeScript compilation
        id: typescript
        run: npm run tsc
        continue-on-error: true

      - name: Run unit tests with coverage
        id: tests
        run: npm run test:coverage
        continue-on-error: true

      - name: Test summary
        id: test-summary
        run: |
          if [[ "${{ steps.lint.outcome }}" == "success" && "${{ steps.typescript.outcome }}" == "success" && "${{ steps.tests.outcome }}" == "success" ]]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
            echo "✅ All tests passed"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
            echo "❌ Some tests failed"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.sha }}
          path: |
            coverage/
            test-results.xml
          retention-days: 14
          if-no-files-found: warn

  # Build and deploy job - runs after security and tests complete successfully  
  build-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security, test]  # Wait for both security and test jobs
    if: ${{ needs.security.outputs.security-status == 'success' && needs.test.outputs.test-status == 'success' }}
    
    environment: 
      name: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      url: ${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}
    
    outputs:
      preview-url: ${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}
      build-status: ${{ steps.build-summary.outputs.status }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_GITHUB_ACTIONS }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup
        with:
          cache-key-suffix: build
          additional-cache-paths: |
            dist
            node_modules/.vite
            .vite

      - name: Build for TEST environment
        env:
          VITE_SUPABASE_PROJECT_URL: ${{ secrets.VITE_SUPABASE_PROJECT_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}
          VITE_STRIPE_API_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_API_PUBLISHABLE_KEY_TEST }}
        run: npm run build-test

      - name: Analyze build output
        id: build-analysis
        run: |
          echo "🏗️ Build Analysis"
          if [ -d "dist" ] && [ -n "$(ls -A dist 2>/dev/null)" ]; then
            BUNDLE_SIZE=$(find dist -name "*.js" -exec cat {} + | wc -c | awk '{printf "%.1f", $1/1024}')
            echo "bundle-size-kb=$BUNDLE_SIZE" >> "$GITHUB_OUTPUT"
            echo "✅ Build completed - Bundle size: ${BUNDLE_SIZE}KB"
          else
            echo "❌ Build failed - no output generated"
            exit 1
          fi

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        if: github.event_name == 'pull_request'
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create preview deployment
        id: create_preview
        if: github.event_name == 'pull_request'
        run: |
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)
          PREVIEW_ALIAS="preview-${SHORT_SHA}"
          
          echo "🚀 Deploying preview with alias: $PREVIEW_ALIAS"
          
          npx netlify deploy \
            --no-build \
            --dir=dist \
            --alias="$PREVIEW_ALIAS" \
            --site ${{ secrets.NETLIFY_SITE_ID_TEST }} \
            --auth ${{ secrets.NETLIFY_API_TOKEN_TEST }} \
            --json > deploy_output_branch.json
          
          if [ ! -f "deploy_output_branch.json" ]; then
            echo "❌ Preview deployment failed"
            exit 1
          fi
          
          NETLIFY_PREVIEW_URL=$(jq -r '.deploy_url' deploy_output_branch.json 2>/dev/null || echo "")
          if [ -z "$NETLIFY_PREVIEW_URL" ] || [ "$NETLIFY_PREVIEW_URL" = "null" ]; then
            echo "❌ Failed to parse preview URL"
            cat deploy_output_branch.json
            exit 1
          fi
          
          echo "NETLIFY_PREVIEW_URL=$NETLIFY_PREVIEW_URL" >> "$GITHUB_OUTPUT"
          echo "✅ Preview deployed to: $NETLIFY_PREVIEW_URL"

      - name: Create deployment status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && steps.create_preview.outputs.NETLIFY_PREVIEW_URL
        env:
          NETLIFY_PREVIEW_URL: ${{ steps.create_preview.outputs.NETLIFY_PREVIEW_URL }}
        with:
          script: |
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Preview Deployment',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              details_url: process.env.NETLIFY_PREVIEW_URL,
              output: {
                title: '🚀 Preview Deployment Ready',
                summary: 'Preview is deployed and ready for testing',
                text: `Preview URL: ${process.env.NETLIFY_PREVIEW_URL}`
              }
            });

      - name: Build summary
        id: build-summary
        run: |
          echo "status=success" >> "$GITHUB_OUTPUT"
          echo "✅ Build and deploy completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-outputs-${{ github.sha }}
          path: |
            dist/
            deploy_output_branch.json
          retention-days: 7
          if-no-files-found: warn

  # Summary job - provides overall pipeline status
  summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [security, test, build-deploy]
    if: always()
    
    steps:
      - name: Create pipeline summary
        run: |
          echo "# 🔄 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SECURITY_STATUS="${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          TEST_STATUS="${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          BUILD_STATUS="${{ needs.build-deploy.result == 'success' && '✅ Passed' || (needs.build-deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}"
          
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🛡️ Security | $SECURITY_STATUS | Dependency review, vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | $TEST_STATUS | ESLint, TypeScript, unit tests |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Build & Deploy | $BUILD_STATUS | Vite build, Lighthouse, preview deployment |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-deploy.outputs.preview-url }}" ]; then
            echo "🔗 **Preview URL**: [${{ needs.build-deploy.outputs.preview-url }}](${{ needs.build-deploy.outputs.preview-url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [[ "${{ needs.security.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build-deploy.result }}" == "success" ]]; then
            echo "🎉 **All pipeline stages completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some pipeline stages failed or were skipped.** Check individual job results above." >> $GITHUB_STEP_SUMMARY
          fi